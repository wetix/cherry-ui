# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Publish to NPM

on:
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # Setup .npmrc file to publish to npm

      - name: Cache node_modules
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: 16.x-${{ runner.OS }}-build-${{ hashFiles('package.json') }}

      - name: Setup Nodejs 16
        uses: actions/setup-node@v2
        with:
          node-version: "16.x"
          registry-url: "https://registry.npmjs.org"

      - name: Install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: npm install

      # - name: Set variables
      #   id: vars
      #   run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Set Current Version
        run: |
          CURRENT_VERSION=$(node -p 'require("./lerna.json").version')
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
          echo ${{ env.CURRENT_VERSION }}

      - name: Tag Check
        id: tag_check
        run: |
          GET_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/v${CURRENT_VERSION}"
          http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
            -H "Authorization: token ${GITHUB_TOKEN}")
          if [ "$http_status_code" -ne "404" ] ; then
            echo "::set-output name=exists_tag::true"
          else
            echo "::set-output name=exists_tag::false"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Git Tag
        if: steps.tag_check.outputs.exists_tag == 'false'
        uses: pkgdeps/git-tag-action@v2
        with:
          version: ${{ env.CURRENT_VERSION }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repo: ${{ github.repository }}
          git_commit_sha: ${{ github.sha }}
          git_tag_prefix: "v"

      - name: Create Release
        id: create_release
        if: steps.tag_check.outputs.exists_tag == 'false' && github.event.pull_request.merged == true
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.CURRENT_VERSION }}
          # Copy Pull Request's tile and body to Release Note
          release_name: ${{ github.event.pull_request.title }}
          body: |
            ${{ github.event.pull_request.body }}
          draft: false
          prerelease: false

      - name: Build and Publish
        if: steps.tag_check.outputs.exists_tag == 'false'
        run: |
          npm run build
          lerna publish from-package --yes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # - name: Publish packages
      #   run: |
      #     lerna publish from-package --yes --message 'ðŸ”– chore: release version ${{ steps.vars.outputs.tag }}'
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # - name: Publish
      #   if: steps.tag_check.outputs.exists_tag == 'false'
      #   run: |
      #     lerna publish from-package --yes --message 'ðŸ”– chore: release version ${{ steps.vars.outputs.tag }}'
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
